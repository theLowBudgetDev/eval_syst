
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ENUMS
enum UserRoleType {
  ADMIN
  SUPERVISOR
  EMPLOYEE
}

enum GoalStatusType {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum AttendanceStatusType {
  PRESENT
  ABSENT
  LATE
  ON_LEAVE
}

enum MessageEventType {
  DEADLINE_APPROACHING
  REVIEW_DUE
  FEEDBACK_REQUEST
  EVALUATION_COMPLETED
  NEW_ASSIGNMENT
}

enum AuditActionType {
  USER_LOGIN
  USER_LOGOUT
  USER_CREATE
  USER_UPDATE
  USER_DELETE
  GOAL_CREATE
  GOAL_UPDATE
  GOAL_DELETE
  EVALUATION_CREATE
  EVALUATION_UPDATE
  EVALUATION_DELETE
  SETTINGS_UPDATE
  ASSIGNMENT_UPDATE
  TRIGGER_CREATE
  TRIGGER_UPDATE
  TRIGGER_DELETE
  CRITERIA_CREATE
  CRITERIA_UPDATE
  CRITERIA_DELETE
  ATTENDANCE_CREATE
  ATTENDANCE_UPDATE
  ATTENDANCE_DELETE
  WORK_OUTPUT_CREATE
  WORK_OUTPUT_UPDATE
  WORK_OUTPUT_DELETE
  SYSTEM_STARTUP
  SYSTEM_SETTINGS_UPDATE
  AUTH_LOGIN_SUCCESS
  AUTH_LOGIN_FAILURE
  AUTH_PASSWORD_CHANGE_SUCCESS
  AUTH_PASSWORD_CHANGE_FAILURE
  DATA_BACKUP_SUCCESS
  DATA_BACKUP_FAILURE
  BATCH_ASSIGNMENT_SUCCESS
  BATCH_ASSIGNMENT_FAILURE
  FEEDBACK_REQUESTED
  NOTIFICATION_CREATED
  NOTIFICATION_READ
  NOTIFICATION_DELETED
  PERFORMANCE_SCORE_CREATED
}

// MODELS

model User {
  id                      String                @id @default(cuid())
  name                    String
  email                   String                @unique
  password                String
  department              String
  position                String
  hireDate                DateTime
  avatarUrl               String?
  role                    UserRoleType

  supervisorId            String?
  supervisor              User?                 @relation("SupervisorEmployee", fields: [supervisorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  supervisedEmployees     User[]                @relation("SupervisorEmployee")

  performanceScoresReceived PerformanceScore[] @relation("EmployeeScores")
  performanceScoresGiven  PerformanceScore[] @relation("EvaluatorScores")
  workOutputs             WorkOutput[]
  attendanceRecords       AttendanceRecord[]
  goalsAsEmployee         Goal[]             @relation("EmployeeGoals")
  goalsAsSupervisor       Goal[]             @relation("SupervisorGoals")
  auditLogs               AuditLog[]
  
  notifications           Notification[]     @relation("RecipientNotifications")
  notificationsGiven      Notification[]     @relation("ActorNotifications")

  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
}

model Goal {
  id           String        @id @default(cuid())
  title        String
  description  String?
  status       GoalStatusType
  dueDate      DateTime?
  employeeId   String
  employee     User          @relation("EmployeeGoals", fields: [employeeId], references: [id], onDelete: Cascade)
  supervisorId String?
  supervisor   User?         @relation("SupervisorGoals", fields: [supervisorId], references: [id], onDelete: SetNull)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model EvaluationCriteria {
  id                String             @id @default(cuid())
  name              String
  description       String
  weight            Float?
  performanceScores PerformanceScore[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model PerformanceScore {
  id             String             @id @default(cuid())
  score          Int
  comments       String?
  evaluationDate DateTime
  employeeId     String
  employee       User               @relation("EmployeeScores", fields: [employeeId], references: [id], onDelete: Cascade)
  criteriaId     String
  criteria       EvaluationCriteria @relation(fields: [criteriaId], references: [id], onDelete: Cascade)
  evaluatorId    String?
  evaluator      User?              @relation("EvaluatorScores", fields: [evaluatorId], references: [id], onDelete: SetNull)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model WorkOutput {
  id             String   @id @default(cuid())
  title          String
  description    String?
  fileUrl        String?
  submissionDate DateTime
  employeeId     String
  employee       User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model AttendanceRecord {
  id         String               @id @default(cuid())
  date       DateTime
  status     AttendanceStatusType
  notes      String?
  employeeId String
  employee   User                 @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
}

model AutoMessageTrigger {
  id              String           @id @default(cuid())
  eventName       MessageEventType
  messageTemplate String
  isActive        Boolean          @default(true)
  daysBeforeEvent Int?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model SystemSetting {
  id                   String   @id @default("global_settings")
  appName              String
  systemTheme          String   @default("system")
  maintenanceMode      Boolean  @default(false)
  notificationsEnabled Boolean  @default(true)
  emailNotifications   Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model AuditLog {
  id         String          @id @default(cuid())
  timestamp  DateTime        @default(now())
  userId     String?
  user       User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  action     AuditActionType
  targetType String?
  targetId   String?
  details    String?
}

model Notification {
  id          String    @id @default(cuid())
  message     String
  isRead      Boolean   @default(false)
  link        String?
  createdAt   DateTime  @default(now())
  
  recipientId String
  recipient   User      @relation("RecipientNotifications", fields: [recipientId], references: [id], onDelete: Cascade)

  actorId     String?
  actor       User?     @relation("ActorNotifications", fields: [actorId], references: [id], onDelete: SetNull)
  
  updatedAt   DateTime  @updatedAt
}
