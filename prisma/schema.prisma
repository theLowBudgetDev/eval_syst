// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ENUMERATIONS for type safety at the database level

enum UserRoleType {
  ADMIN
  SUPERVISOR
  EMPLOYEE
}

enum AttendanceStatusType {
  PRESENT
  ABSENT
  LATE
  ON_LEAVE
}

enum MessageEventType {
  DEADLINE_APPROACHING
  REVIEW_DUE
  FEEDBACK_REQUEST
  EVALUATION_COMPLETED
  NEW_ASSIGNMENT
}

enum GoalStatusType {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum AuditActionType {
  USER_LOGIN
  USER_LOGOUT
  USER_CREATE
  USER_UPDATE
  USER_DELETE
  GOAL_CREATE
  GOAL_UPDATE
  GOAL_DELETE
  EVALUATION_CREATE
  EVALUATION_UPDATE
  EVALUATION_DELETE
  SETTINGS_UPDATE
  ASSIGNMENT_UPDATE
  TRIGGER_CREATE
  TRIGGER_UPDATE
  TRIGGER_DELETE
  CRITERIA_CREATE
  CRITERIA_UPDATE
  CRITERIA_DELETE
  ATTENDANCE_CREATE
  ATTENDANCE_UPDATE
  ATTENDANCE_DELETE
  WORK_OUTPUT_CREATE
  WORK_OUTPUT_UPDATE
  WORK_OUTPUT_DELETE
  SYSTEM_STARTUP
  SYSTEM_SETTINGS_UPDATE
  AUTH_LOGIN_SUCCESS
  AUTH_LOGIN_FAILURE
}


// MODELS

model User {
  id                      String        @id @default(cuid())
  name                    String
  email                   String        @unique
  password                String?
  department              String
  position                String
  hireDate                DateTime
  avatarUrl               String?
  role                    UserRoleType  @default(EMPLOYEE)
  
  supervisorId            String?
  supervisor              User?         @relation("SupervisorEmployee", fields: [supervisorId], references: [id], onDelete: SetNull)
  supervisedEmployees     User[]        @relation("SupervisorEmployee")

  performanceScoresReceived PerformanceScore[] @relation("ScoresReceived")
  performanceScoresGiven    PerformanceScore[] @relation("ScoresGiven")
  workOutputs             WorkOutput[]
  attendanceRecords       AttendanceRecord[]
  goalsAsEmployee         Goal[]        @relation("EmployeeGoals")
  goalsAsSupervisor       Goal[]        @relation("SupervisorGoals")
  auditLogs               AuditLog[]

  @@index([supervisorId])
}

model EvaluationCriteria {
  id                 String             @id @default(cuid())
  name               String
  description        String             @db.Text
  weight             Float?
  performanceScores  PerformanceScore[]
}

model PerformanceScore {
  id             String      @id @default(cuid())
  employeeId     String
  employee       User        @relation("ScoresReceived", fields: [employeeId], references: [id], onDelete: Cascade)
  criteriaId     String
  criteria       EvaluationCriteria @relation(fields: [criteriaId], references: [id], onDelete: Cascade)
  score          Int
  comments       String?     @db.Text
  evaluationDate DateTime
  evaluatorId    String?
  evaluator      User?       @relation("ScoresGiven", fields: [evaluatorId], references: [id], onDelete: SetNull)

  @@index([employeeId])
  @@index([criteriaId])
  @@index([evaluatorId])
}

model WorkOutput {
  id             String   @id @default(cuid())
  employeeId     String
  employee       User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  title          String
  description    String?  @db.Text
  fileUrl        String?
  submissionDate DateTime

  @@index([employeeId])
}

model AttendanceRecord {
  id         String               @id @default(cuid())
  employeeId String
  employee   User                 @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  date       DateTime
  status     AttendanceStatusType
  notes      String?              @db.Text

  @@index([employeeId])
}

model Goal {
  id           String         @id @default(cuid())
  title        String
  description  String?        @db.Text
  status       GoalStatusType
  dueDate      DateTime?
  employeeId   String
  employee     User           @relation("EmployeeGoals", fields: [employeeId], references: [id], onDelete: Cascade)
  supervisorId String?
  supervisor   User?          @relation("SupervisorGoals", fields: [supervisorId], references: [id], onDelete: SetNull)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([employeeId])
  @@index([supervisorId])
}

model AutoMessageTrigger {
  id              String           @id @default(cuid())
  eventName       MessageEventType
  messageTemplate String           @db.Text
  isActive        Boolean          @default(true)
  daysBeforeEvent Int?
}

model SystemSetting {
  id                   String   @id @default("global_settings")
  appName              String   @default("EvalTrack")
  systemTheme          String   @default("system")
  maintenanceMode      Boolean  @default(false)
  notificationsEnabled Boolean  @default(true)
  emailNotifications   Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model AuditLog {
  id         String          @id @default(cuid())
  timestamp  DateTime        @default(now())
  userId     String?
  user       User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  action     AuditActionType
  targetType String?
  targetId   String?
  details    Json?

  @@index([userId])
}
