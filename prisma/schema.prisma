generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                @id @default(cuid())
  name                      String
  email                     String                @unique
  password                  String? // Added for authentication
  department                String
  position                  String
  hireDate                  DateTime
  avatarUrl                 String?
  role                      String // Changed from enum
  supervisorId              String?
  supervisor                User?                 @relation("SupervisorEmployee", fields: [supervisorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  supervisedEmployees       User[]                @relation("SupervisorEmployee")
  performanceScoresReceived PerformanceScore[]    @relation("ScoresForEmployee")
  performanceScoresGiven    PerformanceScore[]    @relation("ScoresByEvaluator")
  workOutputs               WorkOutput[]
  attendanceRecords         AttendanceRecord[]
  goalsAsEmployee           Goal[]                @relation("GoalsForEmployee")
  goalsAsSupervisor         Goal[]                @relation("GoalsBySupervisor")
  auditLogs                 AuditLog[]

  @@index([supervisorId])
}

model SystemSetting {
  id                   String   @id @default("global_settings")
  appName              String
  systemTheme          String
  maintenanceMode      Boolean
  notificationsEnabled Boolean
  emailNotifications   Boolean
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model EvaluationCriteria {
  id                  String             @id @default(cuid())
  name                String
  description         String
  weight              Float?
  performanceScores   PerformanceScore[]
}

model PerformanceScore {
  id             String             @id @default(cuid())
  employeeId     String
  employee       User               @relation("ScoresForEmployee", fields: [employeeId], references: [id], onDelete: Cascade)
  criteriaId     String
  criteria       EvaluationCriteria @relation(fields: [criteriaId], references: [id], onDelete: Cascade)
  score          Int
  comments       String?
  evaluationDate DateTime
  evaluatorId    String?
  evaluator      User?              @relation("ScoresByEvaluator", fields: [evaluatorId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@index([employeeId])
  @@index([criteriaId])
  @@index([evaluatorId])
}

model WorkOutput {
  id             String   @id @default(cuid())
  employeeId     String
  employee       User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  title          String
  description    String?
  fileUrl        String?
  submissionDate DateTime

  @@index([employeeId])
}

model AttendanceRecord {
  id         String   @id @default(cuid())
  employeeId String
  employee   User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  date       DateTime
  status     String // Changed from enum
  notes      String?

  @@index([employeeId])
}

model AutoMessageTrigger {
  id              String  @id @default(cuid())
  eventName       String // Changed from enum
  messageTemplate String
  isActive        Boolean @default(true)
  daysBeforeEvent Int?
}

model Goal {
  id           String   @id @default(cuid())
  title        String
  description  String?
  status       String // Changed from enum
  dueDate      DateTime?
  employeeId   String
  employee     User     @relation("GoalsForEmployee", fields: [employeeId], references: [id], onDelete: Cascade)
  supervisorId String?
  supervisor   User?    @relation("GoalsBySupervisor", fields: [supervisorId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([employeeId])
  @@index([supervisorId])
}

model AuditLog {
  id         String   @id @default(cuid())
  timestamp  DateTime @default(now())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action     String // Changed from enum
  targetType String?
  targetId   String?
  details    String? // Changed from Json

  @@index([userId])
}
