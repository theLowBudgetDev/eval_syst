datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model User {
  id                        String                @id @default(cuid())
  name                      String
  email                     String                @unique
  department                String
  position                  String
  hireDate                  DateTime
  avatarUrl                 String?
  role                      String // Was UserRole enum
  supervisorId              String?
  supervisor                User?                 @relation("SupervisorToEmployees", fields: [supervisorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  supervisedEmployees       User[]                @relation("SupervisorToEmployees")
  performanceScoresReceived PerformanceScore[]    @relation("EmployeeScores")
  performanceScoresGiven    PerformanceScore[]    @relation("EvaluatorScores")
  workOutputs               WorkOutput[]
  attendanceRecords         AttendanceRecord[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EvaluationCriteria {
  id                String             @id @default(cuid())
  name              String
  description       String
  weight            Float?
  performanceScores PerformanceScore[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PerformanceScore {
  id             String             @id @default(cuid())
  employeeId     String
  employee       User               @relation("EmployeeScores", fields: [employeeId], references: [id], onDelete: Cascade)
  criteriaId     String
  criteria       EvaluationCriteria @relation(fields: [criteriaId], references: [id], onDelete: Cascade)
  score          Int
  comments       String?
  evaluationDate DateTime
  evaluatorId    String?
  evaluator      User?              @relation("EvaluatorScores", fields: [evaluatorId], references: [id], onDelete: SetNull) // SetNull if evaluator is deleted

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkOutput {
  id             String   @id @default(cuid())
  employeeId     String
  employee       User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  title          String
  description    String?
  fileUrl        String?
  submissionDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AttendanceRecord {
  id         String   @id @default(cuid())
  employeeId String
  employee   User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  date       DateTime
  status     String // Was AttendanceStatus enum
  notes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AutoMessageTrigger {
  id                String   @id @default(cuid())
  eventName         String // Was MessageEventType enum
  messageTemplate   String
  isActive          Boolean  @default(true)
  daysBeforeEvent   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
