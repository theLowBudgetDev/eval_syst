
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String    @id @default(cuid())
  name                      String
  email                     String    @unique
  department                String
  position                  String
  hireDate                  DateTime
  avatarUrl                 String?
  role                      String // Was UserRole
  supervisorId              String?
  supervisor                User?     @relation("SupervisorEmployee", fields: [supervisorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  supervisedEmployees       User[]    @relation("SupervisorEmployee")
  performanceScoresGiven    PerformanceScore[] @relation("EvaluatorScores")
  performanceScoresReceived PerformanceScore[] @relation("EmployeeScores")
  workOutputs               WorkOutput[]
  attendanceRecords         AttendanceRecord[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Removed UserRole enum block

model EvaluationCriteria {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String
  weight            Float?
  performanceScores PerformanceScore[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PerformanceScore {
  id             String   @id @default(cuid())
  employeeId     String
  employee       User     @relation("EmployeeScores", fields: [employeeId], references: [id], onDelete: Cascade)
  criteriaId     String
  criteria       EvaluationCriteria @relation(fields: [criteriaId], references: [id], onDelete: Restrict) // Prevent deleting criteria if scores exist
  score          Int // e.g., 1-5
  comments       String?
  evaluationDate DateTime
  evaluatorId    String? // Can be null if evaluator is deleted or not applicable
  evaluator      User?    @relation("EvaluatorScores", fields: [evaluatorId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
  @@index([criteriaId])
  @@index([evaluatorId])
}

model WorkOutput {
  id             String   @id @default(cuid())
  employeeId     String
  employee       User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  title          String
  description    String?
  fileUrl        String?
  submissionDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
}

model AttendanceRecord {
  id         String   @id @default(cuid())
  employeeId String
  employee   User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  date       DateTime
  status     String // Was AttendanceStatus (e.g., "PRESENT", "ABSENT", "LATE", "ON_LEAVE")
  notes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
}

// Removed AttendanceStatus enum block

model AutoMessageTrigger {
  id              String    @id @default(cuid())
  eventName       String // Was MessageEventType (e.g., "DEADLINE_APPROACHING", "REVIEW_DUE")
  messageTemplate String
  isActive        Boolean   @default(true)
  daysBeforeEvent Int? // Number of days before the event to trigger the message

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Removed MessageEventType enum block
