
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String   @id @default(cuid())
  name                    String
  email                   String   @unique
  password                String
  department              String
  position                String
  hireDate                DateTime
  avatarUrl               String?
  role                    UserRoleType
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  supervisorId            String?
  supervisor              User?          @relation("SupervisedBy", fields: [supervisorId], references: [id], onDelete: SetNull)
  supervisedEmployees     User[]         @relation("SupervisedBy")

  performanceScoresReceived PerformanceScore[] @relation("PerformanceScoresReceived")
  performanceScoresGiven    PerformanceScore[] @relation("PerformanceScoresGiven")
  workOutputs               WorkOutput[]
  attendanceRecords         AttendanceRecord[]
  goalsAsEmployee           Goal[]             @relation("GoalsAsEmployee")
  goalsAsSupervisor         Goal[]             @relation("GoalsAsSupervisor")
  auditLogs                 AuditLog[]

  notifications          Notification[] @relation("Recipient")
  triggeredNotifications Notification[] @relation("Actor")
}

model PerformanceScore {
  id              String   @id @default(cuid())
  employeeId      String
  criteriaId      String
  score           Int
  comments        String?
  evaluationDate  DateTime
  evaluatorId     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  employee        User               @relation("PerformanceScoresReceived", fields: [employeeId], references: [id], onDelete: Cascade)
  criteria        EvaluationCriteria @relation(fields: [criteriaId], references: [id], onDelete: Restrict)
  evaluator       User?              @relation("PerformanceScoresGiven", fields: [evaluatorId], references: [id], onDelete: SetNull)
}

model EvaluationCriteria {
  id                String             @id @default(cuid())
  name              String             @unique
  description       String
  weight            Float?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  performanceScores PerformanceScore[]
}

model WorkOutput {
  id             String   @id @default(cuid())
  employeeId     String
  title          String
  description    String?
  fileUrl        String?
  submissionDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  employee       User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model AttendanceRecord {
  id         String             @id @default(cuid())
  employeeId String
  date       DateTime
  status     AttendanceStatusType
  notes      String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  employee   User               @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model AutoMessageTrigger {
  id              String           @id @default(cuid())
  eventName       MessageEventType @unique
  messageTemplate String
  isActive        Boolean          @default(true)
  daysBeforeEvent Int?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Goal {
  id           String       @id @default(cuid())
  title        String
  description  String?
  status       GoalStatusType
  dueDate      DateTime?
  employeeId   String
  supervisorId String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  employee     User         @relation("GoalsAsEmployee", fields: [employeeId], references: [id], onDelete: Cascade)
  supervisor   User?        @relation("GoalsAsSupervisor", fields: [supervisorId], references: [id], onDelete: SetNull)
}

model SystemSetting {
  id                   String   @id @default("global_settings")
  appName              String
  systemTheme          String   @default("system")
  maintenanceMode      Boolean  @default(false)
  notificationsEnabled Boolean  @default(true)
  emailNotifications   Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model AuditLog {
  id         String          @id @default(cuid())
  timestamp  DateTime        @default(now())
  userId     String?
  action     AuditActionType
  targetType String?
  targetId   String?
  details    String?         @db.Text // Changed to String for JSON string

  user       User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Notification {
  id          String   @id @default(cuid())
  message     String
  isRead      Boolean  @default(false)
  link        String?
  createdAt   DateTime @default(now())

  recipientId String
  recipient   User   @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)

  actorId     String?
  actor       User?   @relation("Actor", fields: [actorId], references: [id], onDelete: SetNull)

  @@index([recipientId])
}


enum UserRoleType {
  ADMIN
  SUPERVISOR
  EMPLOYEE
}

enum AttendanceStatusType {
  PRESENT
  ABSENT
  LATE
  ON_LEAVE
}

enum MessageEventType {
  DEADLINE_APPROACHING
  REVIEW_DUE
  FEEDBACK_REQUEST
  EVALUATION_COMPLETED
  NEW_ASSIGNMENT
}

enum GoalStatusType {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum AuditActionType {
  USER_LOGIN
  USER_LOGOUT
  USER_CREATE
  USER_UPDATE
  USER_DELETE
  GOAL_CREATE
  GOAL_UPDATE
  GOAL_DELETE
  EVALUATION_CREATE
  EVALUATION_UPDATE
  EVALUATION_DELETE
  SETTINGS_UPDATE
  ASSIGNMENT_UPDATE
  TRIGGER_CREATE
  TRIGGER_UPDATE
  TRIGGER_DELETE
  CRITERIA_CREATE
  CRITERIA_UPDATE
  CRITERIA_DELETE
  ATTENDANCE_CREATE
  ATTENDANCE_UPDATE
  ATTENDANCE_DELETE
  WORK_OUTPUT_CREATE
  WORK_OUTPUT_UPDATE
  WORK_OUTPUT_DELETE
  SYSTEM_STARTUP
  SYSTEM_SETTINGS_UPDATE
  AUTH_LOGIN_SUCCESS
  AUTH_LOGIN_FAILURE
  AUTH_PASSWORD_CHANGE_SUCCESS
  AUTH_PASSWORD_CHANGE_FAILURE
  DATA_BACKUP_SUCCESS
  DATA_BACKUP_FAILURE
  BATCH_ASSIGNMENT_SUCCESS
  BATCH_ASSIGNMENT_FAILURE
  FEEDBACK_REQUESTED
  NOTIFICATION_CREATED
  NOTIFICATION_READ
  NOTIFICATION_DELETED
}
