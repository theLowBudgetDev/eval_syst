// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String   @id @default(cuid())
  name                    String
  email                   String   @unique
  password                String? // Hashed password
  department              String
  position                String
  hireDate                DateTime
  avatarUrl               String?
  role                    String   // Was UserRoleType enum
  supervisorId            String?
  supervisor              User?    @relation("SupervisorEmployee", fields: [supervisorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  supervisedEmployees     User[]   @relation("SupervisorEmployee")
  performanceScoresGiven  PerformanceScore[] @relation("EvaluatorScores")
  performanceScoresReceived PerformanceScore[] @relation("EmployeeScores")
  workOutputs             WorkOutput[]
  attendanceRecords       AttendanceRecord[]
  goalsAsEmployee         Goal[]   @relation("EmployeeGoals")
  goalsAsSupervisor       Goal[]   @relation("SupervisorGoals")
  auditLogs               AuditLog[]
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model EvaluationCriteria {
  id                String             @id @default(cuid())
  name              String
  description       String
  weight            Float?
  performanceScores PerformanceScore[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model PerformanceScore {
  id             String             @id @default(cuid())
  employeeId     String
  employee       User               @relation("EmployeeScores", fields: [employeeId], references: [id], onDelete: Cascade)
  criteriaId     String
  criteria       EvaluationCriteria @relation(fields: [criteriaId], references: [id], onDelete: Restrict)
  score          Int
  comments       String?            @db.Text
  evaluationDate DateTime
  evaluatorId    String?
  evaluator      User?              @relation("EvaluatorScores", fields: [evaluatorId], references: [id], onDelete: SetNull)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model WorkOutput {
  id             String   @id @default(cuid())
  employeeId     String
  employee       User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  title          String
  description    String?  @db.Text
  fileUrl        String?
  submissionDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model AttendanceRecord {
  id          String   @id @default(cuid())
  employeeId  String
  employee    User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  date        DateTime
  status      String // Was AttendanceStatusType enum
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AutoMessageTrigger {
  id              String   @id @default(cuid())
  eventName       String // Was MessageEventType enum
  messageTemplate String   @db.Text
  isActive        Boolean  @default(true)
  daysBeforeEvent Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Goal {
  id           String   @id @default(cuid())
  title        String
  description  String?  @db.Text
  status       String // Was GoalStatusType enum
  dueDate      DateTime?
  employeeId   String
  employee     User     @relation("EmployeeGoals", fields: [employeeId], references: [id], onDelete: Cascade)
  supervisorId String?
  supervisor   User?    @relation("SupervisorGoals", fields: [supervisorId], references: [id], onDelete: SetNull)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model SystemSetting {
  id                   String   @id @default(cuid())
  appName              String
  systemTheme          String   @default("system")
  maintenanceMode      Boolean  @default(false)
  notificationsEnabled Boolean  @default(true)
  emailNotifications   Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model AuditLog {
  id         String   @id @default(cuid())
  timestamp  DateTime @default(now())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action     String //