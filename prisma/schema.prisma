
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
  // Explicitly specifying binaryTargets can sometimes help in environments where detection fails.
  // native is usually sufficient, but adding a specific openssl target if issues persist.
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String    @id @default(cuid())
  name                      String
  email                     String    @unique
  department                String
  position                  String
  hireDate                  DateTime
  avatarUrl                 String?
  role                      String    // Was UserRole enum
  supervisorId              String?
  supervisor                User?     @relation("SupervisedBy", fields: [supervisorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  supervisedEmployees       User[]    @relation("SupervisedBy")
  performanceScoresReceived PerformanceScore[] @relation("ScoresReceived")
  performanceScoresGiven    PerformanceScore[] @relation("ScoresGiven")
  workOutputs               WorkOutput[]
  attendanceRecords         AttendanceRecord[]
  goalsAsEmployee           Goal[]    @relation("GoalsForEmployee")
  goalsAsSupervisor         Goal[]    @relation("GoalsSupervised")
  auditLogs                 AuditLog[] @relation("AuditLogByUser")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EvaluationCriteria {
  id                String   @id @default(cuid())
  name              String
  description       String
  weight            Float?
  performanceScores PerformanceScore[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PerformanceScore {
  id             String   @id @default(cuid())
  employeeId     String
  employee       User     @relation("ScoresReceived", fields: [employeeId], references: [id], onDelete: Cascade)
  criteriaId     String
  criteria       EvaluationCriteria @relation(fields: [criteriaId], references: [id], onDelete:Restrict)
  score          Int
  comments       String?
  evaluationDate DateTime
  evaluatorId    String? // Can be null if system generated or if evaluator is deleted
  evaluator      User?    @relation("ScoresGiven", fields: [evaluatorId], references: [id], onDelete:SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
  @@index([criteriaId])
  @@index([evaluatorId])
}

model WorkOutput {
  id             String   @id @default(cuid())
  employeeId     String
  employee       User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  title          String
  description    String?
  fileUrl        String?
  submissionDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
}

model AttendanceRecord {
  id         String   @id @default(cuid())
  employeeId String
  employee   User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  date       DateTime
  status     String   // Was AttendanceStatus enum
  notes      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId, date])
}


model AutoMessageTrigger {
  id                String   @id @default(cuid())
  eventName         String   // Was MessageEventType enum
  messageTemplate   String
  isActive          Boolean  @default(true)
  daysBeforeEvent   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Goal {
  id            String    @id @default(cuid())
  title         String
  description   String?
  status        String    // Was GoalStatusType enum e.g., "NOT_STARTED", "IN_PROGRESS", "COMPLETED"
  dueDate       DateTime?
  employeeId    String
  employee      User      @relation("GoalsForEmployee", fields: [employeeId], references: [id], onDelete: Cascade)
  supervisorId  String?
  supervisor    User?     @relation("GoalsSupervised", fields: [supervisorId], references: [id], onDelete:SetNull)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([employeeId])
  @@index([supervisorId])
}

model AuditLog {
  id          String    @id @default(cuid())
  timestamp   DateTime  @default(now())
  userId      String?   // User who performed the action, if applicable
  user        User?     @relation("AuditLogByUser", fields: [userId], references: [id], onDelete:SetNull)
  action      String    // e.g., "USER_LOGIN", "EMPLOYEE_UPDATE", "GOAL_CREATE"
  targetType  String?   // e.g., "User", "Goal"
  targetId    String?   // ID of the entity affected
  details     Json?     // Store additional details about the action, like old/new values

  @@index([userId])
  @@index([action])
  @@index([targetType, targetId])
}

